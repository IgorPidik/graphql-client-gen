package tweet

// generated by github.com/emicklei/graphql-client-gen/cmd/gcg version: (dev)
// DO NOT EDIT

import (
	"time"
)

var (
	_ = time.Now
)

// TweetQuery is used for both specifying the query and capturing the response.
type TweetQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      TweetQueryData `graphql:"query OperationName($id: ID!)"`
}

type TweetQueryData struct {
	Tweet `graphql:"Tweet(id: $id)" json:"Tweet"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetQuery) Build(
	operationName string,
	id interface{},
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
}

// TweetsQuery is used for both specifying the query and capturing the response.
type TweetsQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      []TweetsQueryData `graphql:"query OperationName($limit: Int,$skip: Int,$sort_field: String,$sort_order: String)"`
}

type TweetsQueryData struct {
	Tweet `graphql:"Tweet(limit: $limit,skip: $skip,sort_field: $sort_field,sort_order: $sort_order)" json:"Tweet"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetsQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetsQuery) Build(
	operationName string,
	limit int32,
	skip int32,
	sort_field string,
	sort_order string,
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables: map[string]interface{}{
			"limit":      limit,
			"skip":       skip,
			"sort_field": sort_field,
			"sort_order": sort_order,
		},
	}
}

// TweetsMetaQuery is used for both specifying the query and capturing the response.
type TweetsMetaQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      TweetsMetaQueryData `graphql:"query OperationName()"`
}

type TweetsMetaQueryData struct {
	Meta `graphql:"Meta()" json:"Meta"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetsMetaQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetsMetaQuery) Build(
	operationName string,
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables:     map[string]interface{}{},
	}
}

// UserQuery is used for both specifying the query and capturing the response.
type UserQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      UserQueryData `graphql:"query OperationName($id: ID!)"`
}

type UserQueryData struct {
	User `graphql:"User(id: $id)" json:"User"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q UserQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q UserQuery) Build(
	operationName string,
	id interface{},
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables: map[string]interface{}{
			"id": id,
		},
	}
}

// NotificationsQuery is used for both specifying the query and capturing the response.
type NotificationsQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      []NotificationsQueryData `graphql:"query OperationName($limit: Int)"`
}

type NotificationsQueryData struct {
	Notification `graphql:"Notification(limit: $limit)" json:"Notification"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q NotificationsQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q NotificationsQuery) Build(
	operationName string,
	limit int32,
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables: map[string]interface{}{
			"limit": limit,
		},
	}
}

// NotificationsMetaQuery is used for both specifying the query and capturing the response.
type NotificationsMetaQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      NotificationsMetaQueryData `graphql:"query OperationName()"`
}

type NotificationsMetaQueryData struct {
	Meta `graphql:"Meta()" json:"Meta"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q NotificationsMetaQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q NotificationsMetaQuery) Build(
	operationName string,
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables:     map[string]interface{}{},
	}
}

// CurrentFilterQuery is used for both specifying the query and capturing the response.
type CurrentFilterQuery struct {
	// Operation is the operationName and cannot be empty
	Operation string
	Data      CurrentFilterQueryData `graphql:"query OperationName()"`
}

type CurrentFilterQueryData struct {
	FilterValue `graphql:"FilterValue()" json:"FilterValue"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q CurrentFilterQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q CurrentFilterQuery) Build(
	operationName string,
) GraphQLRequest {
	_q.Operation = operationName
	return GraphQLRequest{
		Query:         BuildQuery(_q),
		OperationName: operationName,
		Variables:     map[string]interface{}{},
	}
}
