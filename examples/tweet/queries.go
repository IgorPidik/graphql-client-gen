package tweet

// generated by github.com/emicklei/graphql-client-gen/cmd/gcg version: (dev)
// DO NOT EDIT

import (
	"time"
)

var (
	_ = time.Now
)

// TweetQuery is used for both specifying the query and capturing the response.
type TweetQuery struct {
	Operation string
	Errors    Errors         `json:"errors"`
	Data      TweetQueryData `graphql:"query OperationName($id: ID!)"`
}

type TweetQueryData struct {
	Tweet `graphql:"Tweet(id: $id)" json:"Tweet"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetQuery) Build(
	operationName string, // cannot be emtpy
	_id interface{},
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{
		"id": {value: _id, graphType: "ID!"},
	}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// TweetsQuery is used for both specifying the query and capturing the response.
// This is a
// multine comment
type TweetsQuery struct {
	Operation string
	Errors    Errors            `json:"errors"`
	Data      []TweetsQueryData `graphql:"query OperationName($limit: Int,$skip: Int,$sort_field: String,$sort_order: String)"`
}

type TweetsQueryData struct {
	Tweet `graphql:"Tweets(limit: $limit,skip: $skip,sort_field: $sort_field,sort_order: $sort_order)" json:"Tweets"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetsQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetsQuery) Build(
	operationName string, // cannot be emtpy
	_limit int32,
	_skip int32,
	_sort_field string,
	_sort_order string,
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{
		"limit":      {value: _limit, graphType: "Int"},
		"skip":       {value: _skip, graphType: "Int"},
		"sort_field": {value: _sort_field, graphType: "String"},
		"sort_order": {value: _sort_order, graphType: "String"},
	}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// TweetsMetaQuery is used for both specifying the query and capturing the response.
type TweetsMetaQuery struct {
	Operation string
	Errors    Errors              `json:"errors"`
	Data      TweetsMetaQueryData `graphql:"query OperationName"`
}

type TweetsMetaQueryData struct {
	Meta `graphql:"TweetsMeta" json:"TweetsMeta"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q TweetsMetaQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q TweetsMetaQuery) Build(
	operationName string, // cannot be emtpy
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// UserQuery is used for both specifying the query and capturing the response.
type UserQuery struct {
	Operation string
	Errors    Errors        `json:"errors"`
	Data      UserQueryData `graphql:"query OperationName($id: ID!)"`
}

type UserQueryData struct {
	User `graphql:"User(id: $id)" json:"User"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q UserQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q UserQuery) Build(
	operationName string, // cannot be emtpy
	_id interface{},
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{
		"id": {value: _id, graphType: "ID!"},
	}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// NotificationsQuery is used for both specifying the query and capturing the response.
type NotificationsQuery struct {
	Operation string
	Errors    Errors                   `json:"errors"`
	Data      []NotificationsQueryData `graphql:"query OperationName($limit: Int)"`
}

type NotificationsQueryData struct {
	Notification `graphql:"Notifications(limit: $limit)" json:"Notifications"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q NotificationsQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q NotificationsQuery) Build(
	operationName string, // cannot be emtpy
	_limit int32,
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{
		"limit": {value: _limit, graphType: "Int"},
	}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// NotificationsMetaQuery is used for both specifying the query and capturing the response.
type NotificationsMetaQuery struct {
	Operation string
	Errors    Errors                     `json:"errors"`
	Data      NotificationsMetaQueryData `graphql:"query OperationName"`
}

type NotificationsMetaQueryData struct {
	Meta `graphql:"NotificationsMeta" json:"NotificationsMeta"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q NotificationsMetaQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q NotificationsMetaQuery) Build(
	operationName string, // cannot be emtpy
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}

// CurrentFilterQuery is used for both specifying the query and capturing the response.
type CurrentFilterQuery struct {
	Operation string
	Errors    Errors                 `json:"errors"`
	Data      CurrentFilterQueryData `graphql:"query OperationName"`
}

type CurrentFilterQueryData struct {
	FilterValue `graphql:"CurrentFilter" json:"CurrentFilter"`
}

// OperationName returns the actual query operation name that is used to replace "OperationName"
func (q CurrentFilterQuery) OperationName() string {
	return q.Operation
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q CurrentFilterQuery) Build(
	operationName string, // cannot be emtpy
) GraphQLRequest {
	_q.Operation = operationName
	_typedVars := map[string]valueAndType{}
	_query, _vars := buildQuery(operationName, _q.Data, _typedVars)
	return GraphQLRequest{
		Query:         _query,
		OperationName: operationName,
		Variables:     _vars,
	}
}
