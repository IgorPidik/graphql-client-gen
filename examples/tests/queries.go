package tests

// generated by github.com/emicklei/graphql-client-gen/cmd/gcg version: (dev)
// DO NOT EDIT

import (
	"time"
)

var (
	_ = time.Now
)

// NoArgOpQuery is used for both specifying the query and capturing the response.
type NoArgOpQuery struct {
	Errors Errors           `json:"errors"`
	Data   NoArgOpQueryData `graphql:"query"`
}

type NoArgOpQueryData struct {
	int32 `graphql:"noArgOp" json:"noArgOp"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q NoArgOpQuery) Build(
	operationName string, // cannot be emtpy
) GraphQLRequest {
	_typedVars := map[string]valueAndType{}
	return buildRequest("query", operationName, _q.Data, _typedVars)
}

// OneArgOpQuery is used for both specifying the query and capturing the response.
type OneArgOpQuery struct {
	Errors Errors            `json:"errors"`
	Data   OneArgOpQueryData `graphql:"query"`
}

type OneArgOpQueryData struct {
	string `graphql:"oneArgOp(required: $required)" json:"oneArgOp"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q OneArgOpQuery) Build(
	operationName string, // cannot be emtpy
	_required bool,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"required": {value: _required, graphType: "Boolean!"},
	}
	return buildRequest("query", operationName, _q.Data, _typedVars)
}

// FilterOpQuery is used for both specifying the query and capturing the response.
type FilterOpQuery struct {
	Errors Errors              `json:"errors"`
	Data   []FilterOpQueryData `graphql:"query"`
}

type FilterOpQueryData struct {
	Result `graphql:"filterOp(sort: $sort)" json:"filterOp"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q FilterOpQuery) Build(
	operationName string, // cannot be emtpy
	_sort string,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"sort": {value: _sort, graphType: "String!"},
	}
	return buildRequest("query", operationName, _q.Data, _typedVars)
}

// ListOpQuery is used for both specifying the query and capturing the response.
type ListOpQuery struct {
	Errors Errors            `json:"errors"`
	Data   []ListOpQueryData `graphql:"query"`
}

type ListOpQueryData struct {
	Result `graphql:"ListOp(limit: $limit,prefix: $prefix)" json:"ListOp"`
}

// Build returns a GraphQLRequest with all the parts to send the HTTP request.
func (_q ListOpQuery) Build(
	operationName string, // cannot be emtpy
	_limit int32,
	_prefix string,
) GraphQLRequest {
	_typedVars := map[string]valueAndType{
		"limit":  {value: _limit, graphType: "Int"},
		"prefix": {value: _prefix, graphType: "String!"},
	}
	return buildRequest("query", operationName, _q.Data, _typedVars)
}
